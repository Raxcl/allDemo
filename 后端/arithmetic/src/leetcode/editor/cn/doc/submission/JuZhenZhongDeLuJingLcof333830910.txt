class Solution {
    /**
     * 回溯，定义一个used[]代表已经遍历过，
     * 1. 遍历board找到所有符合word开头的位置，
     * 2. 递归，四周找符合word[]的下一位，找到就used【true】，继续递归，知道word的最后一位，返回true，
     * 3. 否则开始回溯。
     */
    public boolean exist(char[][] board, String word) {
        boolean[][] used = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                char ch = board[i][j];
                if(ch==word.charAt(0)){
                    boolean flag = dfs(board, used, word, i, j, 0);
                    if (flag){
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public boolean dfs(char[][] board, boolean[][] used, String word, int i, int j, int index){
        //设置返回条件，如果匹配到最后一位，返回true
        if (index==word.length()){
            return true;
        }
        //上下左右匹配，匹配之后，设置used=true，进入下一层匹配，如果都失败，回溯并返回
        //上
        char ch = word.charAt(index);
        if (i>=0 && i<board.length && j>=0 && j<board[0].length && !used[i][j] && board[i][j]==ch){
            used[i][j] = true;
            boolean res = dfs(board, used, word, i-1, j, index+1) ||
                    dfs(board, used, word, i+1, j, index+1) ||
                    dfs(board, used, word, i, j-1, index+1)||
                    dfs(board, used, word, i, j+1, index+1);
            //回溯
            used[i][j] = false;
            return res;
        }
        return false;
    }
}

//runtime:5 ms
//memory:43.4 MB
